// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectGS.API.Context;

#nullable disable

namespace ProjectGS.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230804151554_AppDatabasePrincipalMigration")]
    partial class AppDatabasePrincipalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.CostCenter", b =>
                {
                    b.Property<string>("CostCenterId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CostCenterId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.CurrentOrganization", b =>
                {
                    b.Property<long>("CurrentOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CurrentOrganizationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CurrentOrganizations");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CostCenterId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("CurrentOrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<long>("ProcessId")
                        .HasColumnType("bigint");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CurrentOrganizationId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.IdeaSource", b =>
                {
                    b.Property<string>("IdeaSourceId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("InternallySolvable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("IdeaSourceId");

                    b.ToTable("IdeaSources");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Improvement", b =>
                {
                    b.Property<string>("ImprovementId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AffectEntities")
                        .HasColumnType("longtext");

                    b.Property<string>("Assignee")
                        .HasColumnType("longtext");

                    b.Property<string>("CipPex")
                        .HasColumnType("longtext");

                    b.Property<string>("Components")
                        .HasColumnType("longtext");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EstimatedHours")
                        .HasColumnType("int");

                    b.Property<double?>("EstimatedSaving")
                        .HasColumnType("double");

                    b.Property<string>("IdeaSourceId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MajorBenefitsId")
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("MonetaryBenefit")
                        .HasColumnType("double");

                    b.Property<string>("Priority")
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceTypeId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("StatusImprovement")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ImprovementId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IdeaSourceId");

                    b.HasIndex("MajorBenefitsId");

                    b.HasIndex("SourceTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Improvements");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.InfoFinantial", b =>
                {
                    b.Property<string>("InfoFinantialId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("AvaragePrice")
                        .HasColumnType("double");

                    b.Property<string>("CCtrSO")
                        .HasColumnType("longtext");

                    b.Property<string>("CostCenterId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FinalValidity")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("InitialValidity")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrgLevel")
                        .HasColumnType("longtext");

                    b.Property<double>("PriceHour")
                        .HasColumnType("double");

                    b.Property<string>("SMT")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InfoFinantialId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("InfoFinantials");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.MajorBenefits", b =>
                {
                    b.Property<string>("MajorBenefitsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("MajorBenefitsId");

                    b.ToTable("MajorBenefits");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Process", b =>
                {
                    b.Property<long>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProcessId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.SourceType", b =>
                {
                    b.Property<string>("SourceTypeId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("SourceTypeId");

                    b.ToTable("SourceTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Department", b =>
                {
                    b.HasOne("ProjectGS.API.Models.Entities.CostCenter", "CostCenter")
                        .WithMany("Department")
                        .HasForeignKey("CostCenterId");

                    b.HasOne("ProjectGS.API.Models.Entities.CurrentOrganization", "CurrentOrganization")
                        .WithMany("Departmens")
                        .HasForeignKey("CurrentOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGS.API.Models.Entities.Process", "Process")
                        .WithMany("Departmens")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("CurrentOrganization");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Improvement", b =>
                {
                    b.HasOne("ProjectGS.API.Models.Entities.Department", "Department")
                        .WithMany("Improvements")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ProjectGS.API.Models.Entities.IdeaSource", "IdeaSource")
                        .WithMany("Improvements")
                        .HasForeignKey("IdeaSourceId");

                    b.HasOne("ProjectGS.API.Models.Entities.MajorBenefits", "MajorBenefits")
                        .WithMany("Improvements")
                        .HasForeignKey("MajorBenefitsId");

                    b.HasOne("ProjectGS.API.Models.Entities.SourceType", "SourceType")
                        .WithMany("Improvements")
                        .HasForeignKey("SourceTypeId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("IdeaSource");

                    b.Navigation("MajorBenefits");

                    b.Navigation("SourceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.InfoFinantial", b =>
                {
                    b.HasOne("ProjectGS.API.Models.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("ProjectGS.API.Models.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGS.API.Models.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("CostCenter");

                    b.Navigation("Country");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.CostCenter", b =>
                {
                    b.Navigation("Department");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.CurrentOrganization", b =>
                {
                    b.Navigation("Departmens");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Department", b =>
                {
                    b.Navigation("Improvements");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.IdeaSource", b =>
                {
                    b.Navigation("Improvements");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.MajorBenefits", b =>
                {
                    b.Navigation("Improvements");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.Process", b =>
                {
                    b.Navigation("Departmens");
                });

            modelBuilder.Entity("ProjectGS.API.Models.Entities.SourceType", b =>
                {
                    b.Navigation("Improvements");
                });
#pragma warning restore 612, 618
        }
    }
}
